import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { AntdRegistry } from '@ant-design/nextjs-registry';
import ConfigProviderApp from "@/config/ConfigProviderApp";
import { clientConfig, serverConfig } from "@/config/Firebase/config";
import { User } from "@/contexts/Auth/AuthContext";
import { AuthProvider } from "@/contexts/Auth/AuthProvider";
import { Tokens, getTokens } from "next-firebase-auth-edge";
import { filterStandardClaims } from "next-firebase-auth-edge/lib/auth/claims";
import { cookies } from "next/headers";
import ThemeProvider from "@/contexts/Theme/ThemeProvider";
import { getDictionary } from "@/lib/get-dictionary";
import { I18nProvider } from "@/contexts/i18n/i18nProvider";

const geistSans = localFont({
    src: "./fonts/GeistVF.woff",
    variable: "--font-geist-sans",
    weight: "100 900",
});
const geistMono = localFont({
    src: "./fonts/GeistMonoVF.woff",
    variable: "--font-geist-mono",
    weight: "100 900",
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};



const toUser = ({ decodedToken }: Tokens): User => {
    const {
        uid,
        email,
        picture: photoURL,
        email_verified: emailVerified,
        phone_number: phoneNumber,
        name: displayName,
        source_sign_in_provider: signInProvider,
    } = decodedToken;

    const customClaims = filterStandardClaims(decodedToken);

    return {
        uid,
        email: email ?? null,
        displayName: displayName ?? null,
        photoURL: photoURL ?? null,
        phoneNumber: phoneNumber ?? null,
        emailVerified: emailVerified ?? false,
        providerId: signInProvider,
        customClaims,
    };
};

export default async function RootLayout({
    children,
}: {
    children: JSX.Element;
}) {
    const tokens = await getTokens(cookies(), {
        apiKey: clientConfig.apiKey,
        cookieName: serverConfig.cookieName,
        cookieSignatureKeys: serverConfig.cookieSignatureKeys,
        serviceAccount: serverConfig.serviceAccount,
    });
    const user = tokens ? toUser(tokens) : null;

    const dictionaryVI = await getDictionary('vi');
    const dictionaryEN = await getDictionary('en');

    return (
        <html lang="en">
            <head />
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased`}
            >
                <main>
                    <AntdRegistry>
                        <ThemeProvider>
                            <ConfigProviderApp>
                                <AuthProvider user={user}>
                                    <I18nProvider
                                        dictionaryEN={dictionaryEN}
                                        dictionaryVI={dictionaryVI}
                                    >{children}</I18nProvider>
                                </AuthProvider>
                            </ConfigProviderApp>
                        </ThemeProvider>
                    </AntdRegistry>
                </main>
            </body>
        </html>
    );
}
